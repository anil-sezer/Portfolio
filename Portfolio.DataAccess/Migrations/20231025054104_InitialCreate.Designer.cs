// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portfolio.DataAccess;

#nullable disable

namespace Portfolio.DataAccess.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20231025054104_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Portfolio.Domain.Entities.WebAppEntities.BingDailyBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("UrlWorks")
                        .HasColumnType("boolean")
                        .HasColumnName("url_works");

                    b.HasKey("Id")
                        .HasName("pk_bing_daily_background");

                    b.ToTable("bing_daily_background", null, t =>
                        {
                            t.HasComment("List of daily background images by Bing. They are great");
                        });
                });

            modelBuilder.Entity("Portfolio.Domain.Entities.WebAppEntities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("pk_email");

                    b.ToTable("email", null, t =>
                        {
                            t.HasComment("Emails that have been sent to the admin via the website");
                        });
                });

            modelBuilder.Entity("Portfolio.Domain.Entities.WebAppEntities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AcceptLanguage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accept_language");

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_ip");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("pk_request");

                    b.ToTable("request", null, t =>
                        {
                            t.HasComment("Accesses to the website");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
